<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ionic on DTeam 团队日志</title>
    <link>https://blog.dteam.top/tags/ionic.html</link>
    <description>Recent content in Ionic on DTeam 团队日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 06 Feb 2020 16:05:38 +0800</lastBuildDate>
    
	<atom:link href="https://blog.dteam.top/tags/ionic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Angular或Ionic 异常处理：ErrorHandler</title>
      <link>https://blog.dteam.top/posts/2020-02/angular%E6%88%96ionic-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86errorhandler.html</link>
      <pubDate>Thu, 06 Feb 2020 16:05:38 +0800</pubDate>
      
      <guid>https://blog.dteam.top/posts/2020-02/angular%E6%88%96ionic-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86errorhandler.html</guid>
      <description>在前端异常处理是非常重要的，包括客户端和服务端的异常。之前异常处理是对于每个异步函数添加err处理，这样不仅加大了工作量，还容易遗漏某些异常。幸好Angular6提供了ErrorHandler来处理异常（Ionic4为IonicErrorHandler），默认的ErrorHandler处理异常是将其输出在console上，这显然不能满足需求，所以需要自己实现一个GlobalErrorHandler。
为什么要用ErrorHandler统一处理异常  提高效率（例如以前对于每个异步函数都需要传入err参数来处理，现在用ErrorHandler统一处理） 之前对于异步异常处理的代码是下面这样的，光看到这么多err都会觉得头晕，更何况上面的逻辑代码，当然，对于多个异步请求这并不是最好的处理方式，这里只讨论异常。  (err: any) =&amp;gt; { reject(err); } ), (err: any) =&amp;gt; { reject(err); }; }, (err: any) =&amp;gt; { reject(err); }); }, (err: any) =&amp;gt; { reject(err); } );   可以捕获到不易复现的异常，尤其是客户端不易复现的问题。如果客户出现的问题，本地复现不了，又恰好忘了捕获异常，那将会是非常糟糕的，统一处理可将异常信息输入到日志中，能够快速定位问题。
  处理不常见的异常或者运行时异常，及时地给用户提示，不至于因为没有捕获异常而导致程序崩溃或者直接将异常暴露给用户，这也是非常糟糕的。
  对于用户来说，可以显示统一的、友好的异常信息提示，形成独特的系统风格。对于某些异常，甚至可以向用户解释为何会产生这个异常并引导用户行为去消除这个异常。 比如用户在支付时抛出余额不足异常，这个时候应当提示用户的余额不足之外，还应当显示充值入口（如果当前系统支持充值）或者提示用户去哪里充值。
  用ErrorHandler捕获异常的具体实现 第一步：创建ErrorService和LoggingService用于获取异常信息和记录异常日志 ErrorService： 获取客户端的异常信息和堆栈、服务端的异常信息和状态码。
import { Injectable } from &amp;#39;@angular/core&amp;#39;; import { HttpErrorResponse } from &amp;#39;@angular/common/http&amp;#39;; @Injectable() export class ErrorService { getClientMessage(error: Error): string { if (!</description>
    </item>
    
  </channel>
</rss>