<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>研发效能 on DTeam 团队日志</title>
    <link>https://blog.dteam.top/tags/%E7%A0%94%E5%8F%91%E6%95%88%E8%83%BD.html</link>
    <description>Recent content in 研发效能 on DTeam 团队日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 08 Feb 2020 15:30:35 +0800</lastBuildDate>
    
	<atom:link href="https://blog.dteam.top/tags/%E7%A0%94%E5%8F%91%E6%95%88%E8%83%BD/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于远程工作的微观视角</title>
      <link>https://blog.dteam.top/posts/2020-02/%E5%85%B3%E4%BA%8E%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%BE%AE%E8%A7%82%E8%A7%86%E8%A7%92.html</link>
      <pubDate>Sat, 08 Feb 2020 15:30:35 +0800</pubDate>
      
      <guid>https://blog.dteam.top/posts/2020-02/%E5%85%B3%E4%BA%8E%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%BE%AE%E8%A7%82%E8%A7%86%E8%A7%92.html</guid>
      <description>2020 注定不会平凡。
自从年初的黑天鹅事件以来，大量的公司和个人不管愿不愿意，在开年之后都选择了远程开工。与之相伴，那些先行者也都纷纷撰文分享经验，朋友圈和微信群中远程办公也成了热门词汇。看过这些文章之后，想想我们也已经采用远程工作的方式好几年了，于是不能免俗，也想谈谈我个人的一些看法。
就目前所看的文章，大多可以归为工具介绍和企业文化两大类，我比较喜欢其中的两篇文章，分别来自于 PingCAP 和左耳朵耗子（他们的远程团队协作协议令人拍案叫绝！）。而我既不打算重复他人，也没打算去讲太宏大的话题，所以就这些年的微观实践谈谈个人的感受。
本文会从以下几个方面展开讨论，并且讨论的工作类型涉及软件开发，至于其他工种和行业由于没有涉足也就不冒充“砖家”了。
 工程实践 交流沟通 团队关系  没有好的工程实践，远程工作将困难重重。 远程工作的内涵绝不是在一台安装了远程工具的机器上办公那么简单。从结果上来看，它仍然和在办公室里办公没有什么分别：组织一帮人完成一件事。只不过由于地理上的分散性，它会将一些原来在本地可以容忍的问题给放大了，进而造成问题。
设想一下，对于连基本版本控制都没有的公司（不要笑，这不在少数），它怎么可能组织有效地远程开发？要是在办公室里，还能通过开发人员相互之间互拷文件（高级一点的利用共享文件夹）来对付一下，可一旦出了办公室的门，其困难可想而知。
在我看来，不少好的软件开发工程实践具有天然的“地理无关性”（结对编程可能会有影响，但现在也有工具支持），比如每日立会、issue tracking、版本控制、自动化测试、持续集成等等。只注重工具而不关心具体实践，将适得其反，期望越大失望越大。
除了上面讲到的日常开发实践，另一类工程实践问题会因为远程工作而显得格外刺眼：安全。典型比如：开发服务器的安全和代码本身的安全。前者本质上跟产品服务器的管理没有太大差异，只是因为不少公司的开发服务器就是简单的本地一台机器，外面根本访问不了，一旦远程就傻眼了，但这个问题并不是本文要考虑的。至于代码安全，我之前曾在一篇代码管理的文章中有过说明，这里也就不再赘述。
关于工程实践的文章和书籍，外面已经有很多了，这里也不打算展开。只提醒两点：
 实践采用非一日之功，一开始必然经历一个混乱的调整期（产出甚至可能下降），请调整心态制定合理预期和目标，坚持下去。 自艾自怜没有意义，不妨将此次事件视为一次 chaos 工程挑战，积极看待暴露出的问题，逐一分析原因进行调整。  远程工作，有效地交流和沟通至关重要。 为什么我特别喜欢左耳朵耗子他们的远程团队协作协议？因为它本质上跟网络通信协议就是一码事，只不过构成这个网络节点的是人而不是机器。虽然节点由机器换成了人，但问题却是相似的：
 响应会有延时 节点可能失效 异步沟通为主 ……  要是没有一个这样显式的协议约定，协作起来还真是麻烦。就我个人的经验有以下几条：
 必须保证每日例会，它就像一个心跳，保证大家对事情和现状的了解在同一个水平面上。关于每日例会，可直接挪用 scrum 中的那三个问题：  昨天干了什么？ 今天准备做什么？ 阻碍进度的障碍在哪里？   人的时间成本都很高，不要开无效会议，可考虑的措施：  做足会前准备，比如提早将大纲或要讨论的内容提前发出。 只有相关人员参会。 会上尽量不跑题，比如：不要在每日例会上就一个问题进入讨论，只需了解情况，散会之后另外单独组织会议进行探讨。   设定沟通的优先级：哪些直接电话、哪些利用 im 工具即可、哪些采用邮件。同时，尽量在一次沟通上下文中把事情交代清楚，避免来回引用和翻查历史。 注意邮件书写和礼仪，请自行翻阅相关文章，外面有很多资料已经言及。当年在 SAP 时，也有专门培训过，可见其重要性。 自动化固然关键（如 ci 失败邮件），但也要有主动告知他人自己工作状态的习惯，比如你负责的 issue 当前状态需要及时更新。  有些工具做得非常好，比如，gitlab 可以在 commit log 中指定关联的 issue 号，并辅以相应的关键字（如 fix ）达到自动关闭的效果。   遵循约定成俗的习惯，节约大家的时间，比如：  git commit log 的格式可以直接照搬 angular 社区的做法 引入代码分析工具强制要求，java 社区有很多，这里就不再重复   建立上下班机制，不要理所应当地把远程办公（尤其是那些在家办公的团队成员）当做随唤随到的免费劳力。  注：在我看来，在不在家办公更多的是一种仪式感，用以作为上班和下班的开关。    类似的经验可以总结很多，不管是定期会议总结还是项目复盘，将这些记录归类，能自动化的自动化，能改进的改进，坚持下去总会有效果。同时，这些要求除了可以帮助团队现有人员，对于新成员的快速融入也大有裨益。</description>
    </item>
    
  </channel>
</rss>